apiVersion: v1
kind: Service
metadata:
  name: kafka-client-tester
  labels:
    app: kafka-client-tester
    component: service
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: kafka-client-tester
    component: service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-client-tester
  labels:
    app: kafka-client-tester
    component: service
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: kafka-client-tester
      component: service
  template:
    metadata:
      labels:
        app: kafka-client-tester
        component: service
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - image: golang:1.16.5
          name: kafka-client-tester
          command: [ "/bin/sh" ]
          args: [ "-c", "tail -f /dev/null" ]
          ports:
            - containerPort: 8080
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-demo-service-a
  labels:
    app: kafka-demo-service-a
    component: service
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: kafka-demo-service-a
    component: service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-demo-service-a
  labels:
    app: kafka-demo-service-a
    component: service
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: kafka-demo-service-a
      component: service
  template:
    metadata:
      labels:
        app: kafka-demo-service-a
        component: service
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - image: {{ .Values.image.image }}
          name: kafka-demo-service-a
          ports:
            - containerPort: {{ .Values.image.ports.containerPort }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: LOG_LEVEL
              value: "trace"
            - name: TOPIC1
              value: "foo-topic"
            - name: TOPIC2
              value: "bar-topic"
            - name: GROUP
              value: "consumer-group-A"
            - name: BROKER1
              value: {{ .Values.env.scram.broker1 }}
            - name: BROKER2
              value: {{ .Values.env.scram.broker2 }}
{{/*            - name: BROKER3*/}}
{{/*              value: {{ .Values.envbroker3 }}*/}}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-demo-service-b
  labels:
    app: kafka-demo-service-b
    component: service
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: kafka-demo-service-b
    component: service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-demo-service-b
  labels:
    app: kafka-demo-service-b
    component: service
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: kafka-demo-service-b
      component: service
  template:
    metadata:
      labels:
        app: kafka-demo-service-b
        component: service
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - image: {{ .Values.image.image }}
          name: kafka-demo-service-b
          ports:
            - containerPort: {{ .Values.image.ports.containerPort }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: LOG_LEVEL
              value: "trace"
            - name: TOPIC1
              value: "bar-topic"
            - name: TOPIC2
              value: "foo-topic"
            - name: GROUP
              value: "consumer-group-B"
            - name: BROKER1
              value: {{ .Values.env.scram.broker1 }}
            - name: BROKER2
              value: {{ .Values.env.scram.broker2 }}
{{/*            - name: BROKER3*/}}
{{/*              value: {{ .Values.env.broker3 }}*/}}
---
apiVersion: v1
kind: Service
metadata:
  name: cmak
  labels:
    app: cmak
spec:
  ports:
    - name: http
      port: 9000
  selector:
    app: cmak
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cmak
  labels:
    app: cmak
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: cmak
  template:
    metadata:
      labels:
        app: cmak
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
        - name: cmak
          image: hlebalbau/kafka-manager:3.0.0.5
          ports:
            - containerPort: 9000
          imagePullPolicy: IfNotPresent
          env:
            - name: ZK_HOSTS
              value: "z-1.demo-msk-cluster-scram.bsdtxy.c2.kafka.us-east-1.amazonaws.com:2181,z-2.demo-msk-cluster-scram.bsdtxy.c2.kafka.us-east-1.amazonaws.com:2181,z-3.demo-msk-cluster-scram.bsdtxy.c2.kafka.us-east-1.amazonaws.com:2181"